-- Owlby Database Schema Setup Script
-- Run this in your Supabase SQL Editor

-- ===============================
-- USER PROFILES TABLE
-- ===============================

-- Drop existing users table if it exists and recreate it clean
DROP TABLE IF EXISTS users CASCADE;

-- Create clean users table for Owlby profile data
CREATE TABLE users (
  -- Primary identification
  id SERIAL PRIMARY KEY,
  auth0_id TEXT UNIQUE NOT NULL,  -- Auth0 user ID (e.g., "auth0|123456" or "google-oauth2|123456")
  email TEXT NOT NULL,
  name TEXT,
  avatar_url TEXT,
  
  -- Basic profile info
  age INTEGER CHECK (age >= 5 AND age <= 18),
  grade_level INTEGER CHECK (grade_level >= 0 AND grade_level <= 12),
  interests TEXT[],  -- Array of interests
  parent_email TEXT,
  
  -- Complex profile data stored as JSONB
  achievements JSONB DEFAULT '{}'::jsonb,  -- Achievement object with totalStars, badgeProgress, etc.
  stats JSONB DEFAULT '{}'::jsonb,  -- User stats object
  preferences JSONB DEFAULT '{}'::jsonb,  -- User preferences object
  learning_progress JSONB DEFAULT '{}'::jsonb,  -- Learning progress object
  
  -- Profile completion status
  onboarding_completed BOOLEAN DEFAULT FALSE,
  profile_completed BOOLEAN DEFAULT FALSE,
  
  -- Analytics data
  total_sessions INTEGER DEFAULT 0,
  total_chat_messages INTEGER DEFAULT 0,
  total_lessons_completed INTEGER DEFAULT 0,
  total_stories_generated INTEGER DEFAULT 0,
  
  -- Metadata
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  last_login_at TIMESTAMP
);

-- Create indexes for performance
CREATE INDEX idx_users_auth0_id ON users(auth0_id);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_created_at ON users(created_at DESC);
CREATE INDEX idx_users_grade_level ON users(grade_level);
CREATE INDEX idx_users_onboarding_completed ON users(onboarding_completed);
CREATE INDEX idx_users_last_login_at ON users(last_login_at DESC);

-- JSONB indexes for complex queries
CREATE INDEX idx_users_achievements_total_stars ON users USING GIN ((achievements->'totalStars'));
CREATE INDEX idx_users_stats ON users USING GIN (stats);

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to automatically update updated_at
CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON users 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ===============================
-- API USAGE LOGS TABLE
-- ===============================

create table IF NOT EXISTS public.api_usage_logs (
  id uuid not null default gen_random_uuid (),
  timestamp timestamp with time zone not null default now(),
  route text not null,
  user_id text null,
  chat_id text null,
  grade_level integer not null default 3,
  model text not null,
  input_tokens integer not null default 0,
  output_tokens integer not null default 0,
  total_tokens integer not null default 0,
  input_length integer not null,
  output_length integer null default 0,
  response_time_ms integer null,
  success boolean not null default false,
  error_type text null,
  exact_cost numeric(12, 8) null default 0,
  constraint api_usage_logs_pkey primary key (id),
  constraint api_usage_logs_route_check check (
    (
      route = any (
        array['chat'::text, 'lesson'::text, 'story'::text]
      )
    )
  )
);

create index IF not exists idx_api_usage_logs_timestamp on public.api_usage_logs using btree ("timestamp");
create index IF not exists idx_api_usage_logs_route on public.api_usage_logs using btree (route);
create index IF not exists idx_api_usage_logs_user_id on public.api_usage_logs using btree (user_id);

-- ===============================
-- BETA SIGNUP TABLE
-- ===============================

create table IF NOT EXISTS public.beta_signup (
  id bigint generated by default as identity not null,
  created_at timestamp with time zone not null default now(),
  name text not null,
  email text not null,
  role text null,
  constraint beta_signup_pkey primary key (id),
  constraint beta_signup_email_key unique (email)
);

-- ===============================
-- FEEDBACK TABLE
-- ===============================

create table IF NOT EXISTS public.feedback (
  id serial not null,
  user_id text null,
  feedback_type text not null,
  category text null,
  overall_rating integer null,
  ease_of_use_rating integer null,
  content_quality_rating integer null,
  safety_comfort_rating integer null,
  what_you_like text null,
  what_needs_improvement text null,
  feature_suggestions text null,
  learning_goals text null,
  additional_comments text null,
  user_type text not null,
  child_age integer null,
  usage_frequency text null,
  device_type text not null,
  app_version text not null,
  session_context jsonb null,
  is_anonymous boolean null default false,
  contact_email text null,
  created_at timestamp without time zone null default now(),
  constraint feedback_pkey primary key (id),
  constraint fk_feedback_user foreign KEY (user_id) references users (auth0_id) on delete set null,
  constraint feedback_device_type_check check (
    (
      device_type = any (array['ios'::text, 'android'::text, 'web'::text])
    )
  ),
  constraint feedback_ease_of_use_rating_check check (
    (
      (ease_of_use_rating >= 1)
      and (ease_of_use_rating <= 5)
    )
  ),
  constraint feedback_feedback_type_check check (
    (
      feedback_type = any (
        array[
          'general'::text,
          'bug_report'::text,
          'feature_request'::text,
          'learning_experience'::text
        ]
      )
    )
  ),
  constraint feedback_category_check check (
    (
      category = any (
        array[
          'chat'::text,
          'lessons'::text,
          'navigation'::text,
          'content'::text,
          'safety'::text,
          'other'::text
        ]
      )
    )
  ),
  constraint feedback_safety_comfort_rating_check check (
    (
      (safety_comfort_rating >= 1)
      and (safety_comfort_rating <= 5)
    )
  ),
  constraint feedback_usage_frequency_check check (
    (
      usage_frequency = any (
        array[
          'daily'::text,
          'weekly'::text,
          'monthly'::text,
          'first_time'::text
        ]
      )
    )
  ),
  constraint feedback_user_type_check check (
    (
      user_type = any (
        array['child'::text, 'parent'::text, 'teacher'::text]
      )
    )
  ),
  constraint feedback_overall_rating_check check (
    (
      (overall_rating >= 1)
      and (overall_rating <= 5)
    )
  ),
  constraint feedback_content_quality_rating_check check (
    (
      (content_quality_rating >= 1)
      and (content_quality_rating <= 5)
    )
  )
);

create index IF not exists idx_feedback_category on public.feedback using btree (category);
create index IF not exists idx_feedback_created_at on public.feedback using btree (created_at desc);
create index IF not exists idx_feedback_type on public.feedback using btree (feedback_type);
create index IF not exists idx_feedback_user_id on public.feedback using btree (user_id); 